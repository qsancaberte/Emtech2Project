# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aAe4Y_oN7boHlqph4UwYgSo5wWFwFmSh
"""

import streamlit as st
import requests
import h5py
import tensorflow as tf
from io import BytesIO
from PIL import Image

import streamlit as st
import tensorflow as tf
from PIL import Image, ImageOps
import numpy as np
import os

@st.cache(allow_output_mutation=True)

def load_model():
    model = tf.keras.models.load_model("imageclassifier.hdf5")  # Specify the correct path to your HDF5 model file
    return model

    if os.path.exists(model_path):
        model = tf.keras.models.load_model(model_path)
        return model

def predict(image, model):
    img_array = np.array(image)
    img_array = tf.image.resize(img_array, (150, 150))
    img_array = tf.expand_dims(img_array, 0)
    img_array = img_array / 255.0

    predictions = model.predict(img_array)
    predicted_class = class_mapping[np.argmax(predictions[0])]
    return predicted_class

uploaded_file = st.file_uploader("Choose an image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption='Uploaded Image.', use_column_width=True)
    model = load_model()

    predicted_class = predict(image, model)
    st.write(f"Prediction: {predicted_class}")